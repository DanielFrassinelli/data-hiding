function [a, b] = detection_biscotto(imgfile, watfile, attimg)
%  The detection file:
%  - IS UNIQUE for all images,
%  - it must not call any other external function,
%  - must not open any pop-up windows,
%  - must have the following format:
%
% [a, b] = detection_biscotto(imgfile, watfile, attimg)
%
% where
%  - `a` = 0 if the mark is not present or not recognized
%  - `a` = 1 if the mark is recognized in the image under test
%  - `b` = WPSNR between watermarked image and watermarked and attacked image
%  - `attimg` is the string corresponding to the original imagefile
%  - `watfile` is the string corresponding to the watermarked imagefile
%  - `attimg` is the string corresponding to the attacked (under test) imagefile
%
%  The images must be read inside the detection function.
%
% The detection threshold is computed as follows: test your watermarked image
% by presenting 1000 random marks (including the given one) to the detection
% system. Consider the second highest correlation peak value p2. The
% threshold is obtained by: p2+10%(p2). It is unique for all your images and
% it must be computed in advance. It can not be computed during the competion
% in the detection phase.
% --> al momento imgfile è la matrice dell'immagine originale e watfile è la matrice
% del watermark ... cambiero più avanti, attacked è la matrice
% dell'immagine col watermark  filtri
%img = imread(imgfile);
%watermark = imread(watfile) / 255.;
%attacked = imread(attimg);

%% --------- Constants -------- %

alpha = 0.15; % test value

our_seed = 828; % seed

block_size  = 16; % 16 - 8

imsize      = 512; % 512

mark_size   = 1024; %1024 = 32*32

similar_size = 8; % number of similar block we want to use

dct_list_size = imsize*imsize/(block_size * block_size); % number of blocks

threshold = 5.0; % now is dynamic --> we will fix it during the competition

%% --------- Preprocessing-------- %

%original = imread(imgfile);         % original image
%marked =   imread(attimg);            % filtered image
%marked_original  = imread(watfile); % watermarked image

mydata.param     = 0; % embedding param
mydata.row       = 0; % row of the used freq
mydata.col       = 0; % column
mydata.origMean  = 0; % mean of the block
mydata.origVar   = 0; % variance of the block
mydata.markMean  = 0; % mean of the block
mydata.markVar   = 0; % variance of the block
mydata.sInd      = zeros(1 , similar_size); 
mydata.sDif      = zeros(1 , similar_size);
mydata.corrector = 0;

block = repmat(struct(mydata), 1, dct_list_size);

dct.original =  zeros(dct_list_size ,block_size,block_size);
dct.marked   =  zeros(dct_list_size ,block_size,block_size);
dct.filtered =  zeros(dct_list_size ,block_size,block_size); % mark + filters

original = imgfile;         % original image
marked =   attimg;            % filtered image
marked_original  = watfile; % watermarked image

rng(our_seed);   % init prng
mark = round(rand(32,32));
mark = reshape(mark, 1, mark_size); % mark
mark = transformMark(mark);

original_dct                = blkproc(double(original),         [block_size block_size], 'dct2');
marked_dct                  = blkproc(double(marked),           [block_size block_size], 'dct2');
marked_original_dct         = blkproc(double(marked_original),  [block_size block_size], 'dct2');

%original_dct_list        =  zeros(dct_list_size ,block_size,block_size);
%marked_dct_list          =  zeros(dct_list_size ,block_size,block_size);
%marked_original_dct_list =  zeros(dct_list_size ,block_size,block_size);

k = 1; % from block DCT to list DCT
for i = 1:block_size:imsize
    for j = 1:block_size:imsize
        dct.original(k,:,:)  = original_dct(i:(i+block_size-1),j:(j+block_size-1));
        dct.filtered(k,:,:)  = marked_dct(i:(i+block_size-1),j:(j+block_size-1));
        dct.marked(k,:,:)    = marked_original_dct(i:(i+block_size-1),j:(j+block_size-1));
        k = k + 1;
    end
end

%% ----------- Decide which blocks we want to use ------------------------- %

corr_avg = zeros(1 , similar_size);

for i = 1:dct_list_size % calcolo tutti i valori dipendenti dal blocco 
    % embedding / detection --> prendo i blocchi piu simili --> prendo la
    % frequenza che varia di meno tra i blocchi --> embeddo il wmark la con
    % un parametro proporzionale alla media/norma e inversamente
    % proporzionale all'importanza della frequenza nel blocco
    temp = reshape(dct.original(i,:,:), 1 , block_size*block_size);
    [~ , ind] = sort(abs(temp) , 'descend');
    r = mod(ind(2) - 1,16) + 1;
    c = ceil(ind(2)/16);
    
    block(i).row = r;
    block(i).col = c;
    block(i).param = computeBlockParameter(dct.original(i,:,:), r, c);
    block(i).origMean = mean(mean(dct.original(i,:,:)));
    block(i).origVar  = var(var(dct.original(i,:,:)));
    block(i).markMean = mean(mean(dct.filtered(i,:,:)));
    block(i).markVar  = var(var(dct.filtered(i,:,:)));   
end

for i=1:dct_list_size   % calcolo i blocchi piu simili per ogni blocco 
    mi = block(i).origMean;
    vi = block(i).origVar;
    a = [block.origVar];
    term1 = log(1/4 .* ((a ./ vi) + (vi ./ a + 2)));
    term2 = 1/4 * (((mi - [block.origMean]).^2)./(vi - a));
    temp  = (1/4 .* term1) + (1/4 .* term2); 
    temp(i) = inf;
    
    [temp , ind]  = sort(temp , 'ascend');
    block(i).sInd(:) = ind(1:similar_size);
    block(i).sDif(:) = temp(1:similar_size); 
end
%{
temp = zeros(1 , similar_size);
z    = zeros(1 , 5*5);
for i = 1:dct_list_size
    p = 1;
    for r = 2:6
        for c = 2:6
            for k = 1:similar_size
                temp(k) = dct.original(block(i).sInd(k));
            end            
            z(p) = var(temp);
            p = p + 1;
        end
    end
    [a , b] = min(z);
    fprintf('block %d : min : %f , ind %d \n' , i , a , b(1));
end
%}
ps2 = (-(25)^2)/log(0.2);

for i = 1:dct_list_size
    r = block(i).row;
    c = block(i).col;
    
    base_freq = dct.marked(i,r,c);
    %bisogna sistemare i parametri e tutto il resto XD
    
    %filt_freq = dct.filtered(i,r,c);
    
    %rapp_freq = (abs(filt_freq) - abs(base_freq))/ base_freq; % variazione frequenza
    %{
        if(i <= -1)
            fprintf('Block : %d [%d,%d] ---------------------------------------------------- \n' , i , r , c);
            fprintf('[%4d\t %9.4f\t %9.4f\t %f]\n' , i , marked_original_dct_list(i,r,c) , marked_dct_list(i,r,c) , rapp_freq);
        end
    %}
    for j = 1:similar_size       
        index = block(i).sInd(j);
        
        sim_base_freq = dct.marked(index,r,c);
        sim_filt_freq = dct.filtered(index,r,c);
        
        s1 = abs(sim_base_freq / base_freq); % similarità con la mia
        % s1 --> similarità con la mia freq
        
        if(s1 > 1.0)
            s1 = 1/ s1;
        end
        
        s2 = 1 - exp((-(sim_base_freq)^2)/ps2); % similarità con 0
        % s2 --> vicinanza a zero
        
        x = 1/4;
        nd   = x * log(x*(block(i).markVar/block(index).markVar + block(index).markVar/block(i).markVar + 2)) + x*(((block(i).markMean - block(index).markMean)^2)/(block(i).markVar  - block(index).markVar));
        s3 = max(0.15 , 1.0 - abs(nd - block(i).sDif(j)*100));
        %s3 --> similarità di distrubuzione dopo il filtro

        f = (abs(sim_filt_freq) - abs(sim_base_freq)) / sim_base_freq;             
        f = f * s1 * s2 * s3;
        f = min(max(f , -1.00) , 1.00);
        % f --> parametro di correzzione    
        
        corr_avg(j) = f;
        %{
        if (i <= -1)
            fprintf('[%4d\t %9.4f\t %9.4f\t %f] {sim1:%f} {sim2:%f} {sim3:%f}\n', index , marked_original_dct_list(index,r,c) , marked_dct_list(index,r,c) , f, s1 , s2 , s3); 
        end
        %}
    end
        % val --> più lontanto sei dalla media meno conti
        val = sum(corr_avg .* (1 - ((corr_avg - mean(corr_avg)).^2).*10));   
        %{
        if(i <= -1)
            fprintf('average %f , variance %f , norm : %f\n' , mean(similarBlockVariation(i,:)), var(similarBlockVariation(i,:)), norm(similarBlockVariation(i,:)));
            fprintf('result : %f \n' , val / similar_size);
        end
        %}
    block(i).corrector = val / similar_size;
end

%% ----------- Exctract the watermark ----------------------------- %

vmark = mark;
omark = mark;
for i = 1:mark_size    
    r = block(i).row;
    c = block(i).col; 
    freq = dct.original(i,r,c); 
    f_corr = (abs(freq) + abs(freq) * block(i).corrector)*sign(freq);  
    vmark(i)   = (dct.filtered(i,r,c) - (f_corr))/(alpha * block(i).param); %remove watermark
    omark(i)   = (dct.filtered(i,r,c) - (freq))/(alpha *  block(i).param);   %remove watermark
end
%% --------- Postprocessing -------- %

sim = (vmark(1,:) * mark(1,:)')/norm(vmark); % compute similarity
osim = (omark(1,:) * mark(1,:)')/norm(omark); % compute similarity

threshold = computeThreshold(vmark);

fprintf('\nSimilarity   : %f    Threshold   : %f  \n' , sim , threshold);
fprintf('\nOriginal sim : %f  Original Threshold   : %f  \n' , osim , threshold);

if (sim >= threshold)
    a = 1;
else
    a = 0;
end

b = wpsnr(marked_original , marked);

end

%% ----------------------------- Utils ------------------------------------------ %%

function param = computeBlockParameter(block, x , y)
    temp_v = reshape(block , size(block,2) , size(block,3));
    param = sqrt(norm(temp_v));
end

function mark = transformMark(mark) % test
    for j = 1:size(mark,2) 
        if (mark(j) == 0)
            mark(j) = -1;
        end
    end
end

